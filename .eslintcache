[{"E:\\WebstormProjects\\board1\\src\\index.js":"1","E:\\WebstormProjects\\board1\\src\\reportWebVitals.js":"2","E:\\WebstormProjects\\board1\\src\\App.js":"3","E:\\WebstormProjects\\board1\\src\\components\\Home.jsx":"4","E:\\WebstormProjects\\board1\\src\\components\\HeaderComponent.jsx":"5","E:\\WebstormProjects\\board1\\src\\components\\ListBoardComponent.jsx":"6","E:\\WebstormProjects\\board1\\src\\service\\BoardService.js":"7","E:\\WebstormProjects\\board1\\src\\components\\FooterComponent2.jsx":"8","E:\\WebstormProjects\\board1\\src\\components\\CreateBoardComponent.jsx":"9","E:\\WebstormProjects\\board1\\src\\components\\ReadBoardComponent.jsx":"10"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":1119,"mtime":1610953056327,"results":"14","hashOfConfig":"12"},{"size":239,"mtime":1610934613103,"results":"15","hashOfConfig":"12"},{"size":753,"mtime":1610944714915,"results":"16","hashOfConfig":"12"},{"size":2517,"mtime":1610951475740,"results":"17","hashOfConfig":"12"},{"size":602,"mtime":1610951000491,"results":"18","hashOfConfig":"12"},{"size":455,"mtime":1610943286203,"results":"19","hashOfConfig":"12"},{"size":5586,"mtime":1610953269161,"results":"20","hashOfConfig":"12"},{"size":3615,"mtime":1610951468685,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1wv0jzn",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},"E:\\WebstormProjects\\board1\\src\\index.js",[],["46","47"],"E:\\WebstormProjects\\board1\\src\\reportWebVitals.js",[],"E:\\WebstormProjects\\board1\\src\\App.js",[],"E:\\WebstormProjects\\board1\\src\\components\\Home.jsx",[],"E:\\WebstormProjects\\board1\\src\\components\\HeaderComponent.jsx",[],"E:\\WebstormProjects\\board1\\src\\components\\ListBoardComponent.jsx",["48"],"import React, {Component} from 'react';\r\nimport BoardService from '../service/BoardService';\r\n\r\n\r\nclass ListBoardComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            boards: []\r\n        }\r\n\r\n        this.createBoard = this.createBoard.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        BoardService.getBoards().then((res) => {\r\n            this.setState({boards: res.data});\r\n        });\r\n    }\r\n\r\n    createBoard() {\r\n        this.props.history.push('/create-board/_create');\r\n    }\r\n\r\n    readBoard(no){\r\n        this.props.history.push(`/read-board/${no}`);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2 className=\"text-center\">Boards List</h2>\r\n                <div className = \"row\">\r\n                    <button className=\"btn btn-primary\" onClick={this.createBoard}> 글 작성</button>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <table className=\"table table-striped table-bordered\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th>글 번호</th>\r\n                            <th>타이틀</th>\r\n                            <th>작성자</th>\r\n                            <th>작성일</th>\r\n                            <th>갱신일</th>\r\n                            <th>좋아요수</th>\r\n                            <th>조회수</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {\r\n                            this.state.boards.map(\r\n                                board =>\r\n                                    <tr key={board.no}>\r\n                                        <td> {board.no} </td>\r\n                                        <td> <a onClick={()=> this.readBoard(board.no)}>{board.title}</a> </td>\r\n                                        <td> {board.memberNo} </td>\r\n                                        <td> {board.createdTime} </td>\r\n                                        <td> {board.updatedTime} </td>\r\n                                        <td> {board.likes} </td>\r\n                                        <td> {board.counts} </td>\r\n                                    </tr>\r\n                            )\r\n                        }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListBoardComponent;","E:\\WebstormProjects\\board1\\src\\service\\BoardService.js",[],["49","50"],"E:\\WebstormProjects\\board1\\src\\components\\FooterComponent2.jsx",[],"E:\\WebstormProjects\\board1\\src\\components\\CreateBoardComponent.jsx",[],"E:\\WebstormProjects\\board1\\src\\components\\ReadBoardComponent.jsx",["51","52","53","54"],"import React, {Component} from 'react';\r\nimport BoardService from '../service/BoardService'\r\n\r\n\r\nclass ReadBoardComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            no    : this.props.match.params.no,\r\n            board : {}\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        BoardService.getOneBoard(this.state.no).then(res => {\r\n            this.setState({board: res.data});\r\n        });\r\n    }\r\n\r\n    returnBoardType(typeNo) {\r\n        let type = null;\r\n        if(typeNo == 1 ){\r\n            type =\"자유게시판\"\r\n        }else if (type == 2 ){\r\n            type = \"질문과 답변게시판\"\r\n        }else if(type  == 3){\r\n            type = \"타입 미지정 \"\r\n        }\r\n\r\n        return (\r\n            <div className = \"row\">\r\n                <label> boardType : {type}</label>\r\n            </div>\r\n        )\r\n\r\n    }\r\n    // 게시판 타입벼로 표시를 다르게 함\r\n    // 파라미터 값에 따라 페이지 표할 내용을 변경\r\n    returnDate(cTime, uTime){\r\n        return(\r\n            <div className={\"row\"}>\r\n                <label> 생성일 : [{cTime}] / 최종 수정일 : [{uTime}]</label>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //글 목록으로 이동하는 함수를 정의\r\n    goToList(){\r\n        this.props.history.push('/board');\r\n    }\r\n\r\n    goToUpdate = (event) => {\r\n        event.preventDefault();\r\n        this.props.history.push(`/create-board/${this.state.no}`);\r\n    }\r\n\r\n    deleteView = async function () {\r\n        if(window.confirm(\"정말로 글을 삭제하시겠습니까?\\n삭제된 글은 복구 할 수 없습니다.\")) {\r\n            BoardService.deleteBoard(this.state.no).then( res => {\r\n                console.log(\"delete result => \"+ JSON.stringify(res));\r\n                if (res.status == 200) {\r\n                    this.props.history.push('/board');\r\n                } else {\r\n                    alert(\"글 삭제가 실패했습니다.\");\r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className = \"card col-md-6 offset-md-3\">\r\n                    <h3 className =\"text-center\"> Read Detail</h3>\r\n                    <div className = \"card-body\">\r\n                        {this.returnBoardType(this.state.board.type)}\r\n                        <div className = \"row\">\r\n                            <label> Title </label> : {this.state.board.title}\r\n                        </div>\r\n\r\n                        <div className = \"row\">\r\n                            <label> Contents </label> : <br></br>\r\n                            <textarea value={this.state.board.contents} readOnly/>\r\n                        </div >\r\n\r\n                        <div className = \"row\">\r\n                            <label> MemberNo  </label>:\r\n                            {this.state.board.memberNo}\r\n                        </div>\r\n\r\n                        {this.returnDate(this.state.board.createdTime, this.state.board.updatedTime) }\r\n                        <button className=\"btn btn-primary\" onClick={this.goToList.bind(this)} style={{marginLeft:\"10px\"}}>글 목록으로 이동</button>\r\n                        <button className=\"btn btn-info\" onClick={this.goToUpdate} style={{marginLeft:\"10px\"}}>글 수정</button>\r\n                        <button className=\"btn btn-danger\" onClick={() => this.deleteView()} style={{marginLeft:\"10px\"}}>글 삭제</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ReadBoardComponent;",{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":60,"column":46,"nodeType":"61","endLine":60,"endColumn":89},{"ruleId":"55","replacedBy":"62"},{"ruleId":"57","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":23,"column":19,"nodeType":"66","messageId":"67","endLine":23,"endColumn":21},{"ruleId":"64","severity":1,"message":"65","line":25,"column":24,"nodeType":"66","messageId":"67","endLine":25,"endColumn":26},{"ruleId":"64","severity":1,"message":"65","line":27,"column":24,"nodeType":"66","messageId":"67","endLine":27,"endColumn":26},{"ruleId":"64","severity":1,"message":"65","line":62,"column":32,"nodeType":"66","messageId":"67","endLine":62,"endColumn":34},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["68"],["69"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]